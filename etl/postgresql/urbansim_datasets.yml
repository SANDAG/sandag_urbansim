schema : urbansim

building_sqft_per_job :
    ##Input Query
    in_query_non_spatial : >
        SELECT
            id
            ,luz_id
            ,development_type_id
            ,sqft_per_emp
        FROM spacecore.urbansim.building_sqft_per_job
    ##Index Column
    index_col : id
    ##Output
    out_table : building_sqft_per_job
    #Map columns
    column_data_types :
        id : !!python/name:sqlalchemy.Integer
        luz_id : !!python/name:sqlalchemy.Integer
        development_type_id : !!python/name:sqlalchemy.Integer
        sqft_per_emp : !!python/name:sqlalchemy.Float

buildings :
    ##Input Query
    in_query_non_spatial : >
        SELECT
            building_id
            ,development_type_id
            ,parcel_id
            ,subparcel_id
            ,improvement_value
            ,residential_units
            ,residential_sqft
            ,non_residential_sqft
            ,job_spaces
            ,non_residential_rent_per_sqft
            ,price_per_sqft
            ,stories
            ,year_built
            ,data_source
            ,luz_id
            ,subparcel_assignment
            ,block_id
        FROM
            spacecore.urbansim.buildings
    ##Index Column
    index_col : building_id
    indexes :
        ix_buildings_parcel_id: parcel_id
        ix_buidlings_development_type_id: development_type_id
    ##Input Query Spatial
    in_query_spatial : >
        SELECT
            building_id
            ,shape.STAsText() AS shape
            ,centroid.STAsText() AS centroid
        FROM
            spacecore.urbansim.buildings
    ##Output
    out_table : buildings
    #Map columns --> Notice special geometry column
    column_data_types :
        building_id : !!python/name:sqlalchemy.Integer
        development_type_id : !!python/name:sqlalchemy.Integer
        parcel_id : !!python/name:sqlalchemy.Integer
        subparcel_id : !!python/name:sqlalchemy.Integer
        improvement_value : !!python/name:sqlalchemy.Float
        residential_units : !!python/name:sqlalchemy.Integer
        residential_sqft :  !!python/name:sqlalchemy.Integer
        non_residential_sqft : !!python/name:sqlalchemy.Integer
        job_spaces : !!python/name:sqlalchemy.Integer
        non_residential_rent_per_sqft : !!python/name:sqlalchemy.Float
        price_per_sqft : !!python/name:sqlalchemy.Float
        stories : !!python/name:sqlalchemy.Integer
        year_built : !!python/name:sqlalchemy.Integer
        data_source : !!python/name:sqlalchemy.String
        luz_id: !!python/name:sqlalchemy.Integer
        shape : !!python/object:geoalchemy2.Geography { geometry_type: 'GEOMETRY', srid: 4326, spatial_index: True }
        centroid : !!python/object:geoalchemy2.Geography { geometry_type: 'POINT', srid: 4326, spatial_index: True }
        subparcel_assignment : !!python/name:sqlalchemy.String
        block_id : !!python/name:sqlalchemy.String

development_type :
    ##Input Query
    in_query_non_spatial : >
        SELECT
            development_type_id
            ,name
            ,building_form
            ,site_use
            ,priority
        FROM
            spacecore.ref.development_type
    ##Index Column
    index_col : development_type_id
    ##Output
    out_table : development_type
    #Map columns --> Notice special geometry column
    column_data_types :
        development_type_id : !!python/name:sqlalchemy.Integer
        name : !!python/name:sqlalchemy.String
        building_form : !!python/name:sqlalchemy.String
        site_use : !!python/name:sqlalchemy.String
        priority : !!python/name:sqlalchemy.Integer

edges :
    ##Input Query
    in_query_non_spatial : >
        SELECT
            from_node
              ,to_node
              ,distance
        FROM
            spacecore.urbansim.edges
    ##Index Column
    index_col : ['from_node', 'to_node']
    ##Output
    out_table : edges
    #Map columns
    column_data_types :
        from_node : !!python/name:sqlalchemy.Integer
        to_node : !!python/name:sqlalchemy.Integer
        distance : !!python/name:sqlalchemy.Float

households :
    ##Input Query
    in_query_non_spatial : >
        SELECT
            household_id
            ,scenario_id
            ,building_id
            ,tenure
            ,persons
            ,workers
            ,age_of_head
            ,income
            ,children
            ,race_id
            ,cars
        FROM
            spacecore.urbansim.households
        WHERE
            building_id IN (SELECT building_id FROM urbansim.buildings)
    ##Index Column
    index_col : household_id
    indexes :
        ix_households_building_id: building_id
    ##Output
    out_table : households
    #Map columns
    column_data_types :
        household_id : !!python/name:sqlalchemy.Integer
        scenario_id : !!python/name:sqlalchemy.Integer
        building_id : !!python/name:sqlalchemy.Integer
        tenure : !!python/name:sqlalchemy.Integer
        persons : !!python/name:sqlalchemy.Integer
        workers : !!python/name:sqlalchemy.Integer
        age_of_head : !!python/name:sqlalchemy.Integer
        income : !!python/name:sqlalchemy.Integer
        children : !!python/name:sqlalchemy.Integer
        race_id : !!python/name:sqlalchemy.Integer
        cars : !!python/name:sqlalchemy.Integer

jobs :
    ##Input Query
    in_query_non_spatial : >
        SELECT
            job_id
            ,building_id
            ,sector_id
        FROM
            spacecore.urbansim.jobs
    ##Index Column
    index_col : job_id
    indexes :
        ix_jobs_building_id: building_id
        ix_jobs_sector_id: sector_id
    ##Output
    out_table : jobs
    #Map columns
    column_data_types :
        job_id : !!python/name:sqlalchemy.Integer
        building_id : !!python/name:sqlalchemy.BigInteger
        sector_id : !!python/name:sqlalchemy.Integer

nodes :
    ##Input Query
    in_query_non_spatial : >
        SELECT
            node
            ,x
            ,y
            ,on_ramp
        FROM
            spacecore.urbansim.nodes

    ##Index Column
    index_col : node
    ##Input Query Spatial
    in_query_spatial : >
        SELECT
            node
            ,geom.STAsText() AS shape
        FROM
            spacecore.urbansim.nodes
    ##Output
    out_table : nodes
    #Map columns --> Notice special geometry column
    column_data_types :
        building_id : !!python/name:sqlalchemy.Integer
        development_type_id : !!python/name:sqlalchemy.Integer
        parcel_id : !!python/name:sqlalchemy.Integer
        improvement_value : !!python/name:sqlalchemy.Float
        residential_units : !!python/name:sqlalchemy.Integer
        residential_sqft : !!python/name:sqlalchemy.Integer
        non_residential_sqft : !!python/name:sqlalchemy.Integer
        job_spaces : !!python/name:sqlalchemy.Integer
        non_residential_rent_per_sqft : !!python/name:sqlalchemy.Float
        price_per_sqft : !!python/name:sqlalchemy.Float
        stories : !!python/name:sqlalchemy.Integer
        year_built : !!python/name:sqlalchemy.Integer
        shape : !!python/object:geoalchemy2.Geography { geometry_type: 'POINT', srid: 4326, spatial_index: True }

parcels :
    ##Input Query
    in_query_non_spatial : >
        SELECT
            parcel_id
            ,block_id
            ,development_type_id
            ,zoning_id
            ,land_value
            ,parcel_acres
            ,region_id
            ,mgra_id
            ,luz_id
            ,msa_id
            ,proportion_undevelopable
            ,tax_exempt_status
            ,distance_to_freeway
            ,distance_to_onramp
            ,distance_to_coast
            ,distance_to_transit
        FROM
          spacecore.urbansim.parcels
    ##Index Column
    index_col : parcel_id
    indexes :
        ix_parcels_mgra_id: mgra_id
        ix_parcels_zoning_id: zoning_id
    ##Pandas Data Frame for spatial data
    in_query_spatial : >
        SELECT
            parcel_id
            ,shape.STAsText() as shape
            ,centroid.STAsText() as centroid
        FROM
            spacecore.urbansim.parcels
    ##Output
    out_table : parcels
    #Map columns --> Notice special geometry column
    column_data_types :
        parcel_id : !!python/name:sqlalchemy.Integer
        block_id : !!python/name:sqlalchemy.String
        development_type_id : !!python/name:sqlalchemy.Integer
        zoning_id : !!python/name:sqlalchemy.String
        land_value : !!python/name:sqlalchemy.Integer
        parcel_acres : !!python/name:sqlalchemy.Float
        region_id : !!python/name:sqlalchemy.Integer
        mgra_id : !!python/name:sqlalchemy.Integer
        luz_id : !!python/name:sqlalchemy.Integer
        msa_id : !!python/name:sqlalchemy.Integer
        proportion_undevelopable : !!python/name:sqlalchemy.Numeric
        tax_exempt_status : !!python/name:sqlalchemy.String
        distance_to_freeway : !!python/name:sqlalchemy.Float
        distance_to_onramp : !!python/name:sqlalchemy.Float
        distance_to_coast : !!python/name:sqlalchemy.Float
        distance_to_transit : !!python/name:sqlalchemy.Float
        shape : !!python/object:geoalchemy2.Geography { geometry_type: 'MULTIPOLYGON', srid: 4326, spatial_index: True }
        centroid : !!python/object:geoalchemy2.Geography { geometry_type: 'POINT', srid: 4326, spatial_index: True }

zoning_allowed_use :
    ##Input Query
    in_query_non_spatial : >
        SELECT
            zoning_id
            ,zoning_allowed_use_id
            ,development_type_id
        FROM
            urbansim.zoning_allowed_use
    ##Index Column
    index_col : zoning_allowed_use_id
    indexes :
        ix_zoning_allowed_use_zoning_id: zoning_id
        ix_zoning_allowed_use_development_type_id: development_type_id
    ##Output
    out_table : zoning_allowed_use
    #Map columns
    column_data_types :
        zoning_id : !!python/name:sqlalchemy.String
        zoning_allowed_use_id : !!python/name:sqlalchemy.Integer
        development_type_id : !!python/name:sqlalchemy.Integer

zoning :
    ##Input Query
    in_query_non_spatial : >
        SELECT
            zoning_id
            ,jurisdiction_id
            ,zone_code
            ,region_id
            ,min_lot_size
            ,min_far
            ,max_far
            ,min_front_setback
            ,max_front_setback
            ,rear_setback
            ,side_setback
            ,min_dua
            ,max_dua
            ,max_res_units
            ,max_building_height
            ,zone_code_link
            ,notes
            ,review_date
            ,review_by
        FROM
            spacecore.urbansim.zoning
    ##Index Column
    index_col : zoning_id
    indexes :
        ix_zoning_jurisdiction_id: jurisdiction_id
    ##Input Query Spatial
    in_query_spatial : >
        SELECT
            zoning_id
            ,shape.STAsText() as shape
        FROM spacecore.urbansim.zoning
        WHERE shape IS NOT NULL
    ##Output
    out_table : zoning
    #Map columns --> Notice special geometry column
    column_data_types :
        zoning_id : !!python/name:sqlalchemy.String
        jurisdiction_id : !!python/name:sqlalchemy.Integer
        zone_code : !!python/name:sqlalchemy.String
        min_lot_size: !!python/name:sqlalchemy.Integer
        region_id : !!python/name:sqlalchemy.Integer
        min_far : !!python/name:sqlalchemy.Numeric
        max_far : !!python/name:sqlalchemy.Numeric
        min_front_setback : !!python/name:sqlalchemy.Numeric
        max_front_setback : !!python/name:sqlalchemy.Numeric
        rear_setback : !!python/name:sqlalchemy.Numeric
        side_setback : !!python/name:sqlalchemy.Numeric
        min_dua : !!python/name:sqlalchemy.Numeric
        max_dua : !!python/name:sqlalchemy.Numeric
        max_res_units: !!python/name:sqlalchemy.Integer
        max_building_height : !!python/name:sqlalchemy.Integer
        zone_code_link : !!python/name:sqlalchemy.String
        notes : !!python/name:sqlalchemy.String
        review_date : !!python/name:sqlalchemy.DateTime
        review_by : !!python/name:sqlalchemy.String
        shape : !!python/object:geoalchemy2.Geography { geometry_type: 'MULTIPOLYGON', srid: 4326, spatial_index: True }

household_controls :
    in_query_non_spatial: >
        SELECT
            ROW_NUMBER() OVER (ORDER BY yr, hh_income_id) as household_control_id
            ,yr
            ,hh_income_id as income_quartile
            ,hh as households
        FROM
            isam.defm.households
        WHERE
            dem_version = 'S0021'
            and eco_version = '001' AND yr > 2010

    index_col: household_control_id
    indexes :
        ix_household_ctrl_yr: yr
    ##Output
    out_table : household_controls
    #Map columns
    column_data_types :
        household_control_id : !!python/name:sqlalchemy.Integer
        yr : !!python/name:sqlalchemy.Integer
        income_quartile : !!python/name:sqlalchemy.Integer
        households: !!python/name:sqlalchemy.Integer
